package ast;

import contextual.exceptions.IdentException;
import syntactic.exceptions.CompileException;
import ast.nodes.leafs.BooleanLiteral;
import ast.nodes.leafs.CoordinatePosition;
import ast.nodes.leafs.Identifier;
import ast.nodes.leafs.RelationalOperator;
import ast.nodes.leafs.MultiplyDivideOperator;
import ast.nodes.leafs.NumberLiteral;
import ast.nodes.leafs.PlusMinusOperator;
import ast.nodes.leafs.StringLiteral;
import ast.nodes.leafs.Type;
import ast.nodes.nonTerminals.ArithmeticExpression;
import ast.nodes.nonTerminals.BooleanExpression;
import ast.nodes.nonTerminals.Command;
import ast.nodes.nonTerminals.CommandGoto;
import ast.nodes.nonTerminals.CommandMove;
import ast.nodes.nonTerminals.Coordinate;
import ast.nodes.nonTerminals.Coordinates;
import ast.nodes.nonTerminals.EventCommand;
import ast.nodes.nonTerminals.Expression;
import ast.nodes.nonTerminals.ExpressionBlock;
import ast.nodes.nonTerminals.Factor;
import ast.nodes.nonTerminals.IfStatement;
import ast.nodes.nonTerminals.Literal;
import ast.nodes.nonTerminals.Parameters;
import ast.nodes.nonTerminals.Program;
import ast.nodes.nonTerminals.Term;
import ast.nodes.nonTerminals.VarAssignment;
import ast.nodes.nonTerminals.VarAssignmentCommand;
import ast.nodes.nonTerminals.VarDeclaration;
import ast.nodes.nonTerminals.WhereExpression;
import ast.nodes.subNodes.FactorBlock;
import ast.nodes.subNodes.ElseIfBlock;
import ast.nodes.subNodes.TermBlock;

public interface IASTVisitor {
	void visit(CoordinatePosition coordinatePosition) throws CompileException;
	void visit(ArithmeticExpression arithmeticExpression) throws CompileException;
	void visit(BooleanExpression booleanExpression) throws CompileException;
	void visit(Command command) throws CompileException;
	void visit(CommandGoto commandGoto) throws CompileException;
	void visit(CommandMove commandMove) throws CompileException;
	void visit(Coordinates coordinates) throws CompileException;
	void visit(EventCommand eventCommand) throws IdentException, CompileException;
	void visit(Expression expression) throws CompileException;
	void visit(ExpressionBlock expressionBlock) throws CompileException;
	void visit(Factor factor) throws CompileException;
	void visit(IfStatement ifStatement) throws CompileException;
	void visit(Literal literal);
	void visit(Parameters parameters) throws CompileException;
	void visit(VarAssignment varAssignment) throws CompileException;
	void visit(VarAssignmentCommand varAssignmentCommand) throws CompileException;
	void visit(VarDeclaration varDeclaration) throws CompileException;
	void visit(Program program) throws CompileException, IdentException;
	void visit(WhereExpression whereExpression) throws CompileException;
	void visit(BooleanLiteral booleanAST);
	void visit(Coordinate coordinate) throws CompileException;
	void visit(Identifier identifier) throws CompileException;
	void visit(RelationalOperator relationalOperator);
	void visit(MultiplyDivideOperator multiplyDivideOperator);
	void visit(NumberLiteral numberAST);
	void visit(PlusMinusOperator plusMinusOperator);
	void visit(StringLiteral stringAST);
	void visit(Type type);
	void visit(FactorBlock factorBlock) throws CompileException;
	void visit(ElseIfBlock orBlock) throws CompileException;
	void visit(TermBlock termBlock) throws CompileException;
	void visit(Term term) throws CompileException;
}
